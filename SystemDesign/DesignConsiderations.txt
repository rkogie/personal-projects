------------------------
# DESIGNING APPLICATIONS
------------------------



==============================================================================
1 - Requirements & Goals
==============================================================================
1.1 - Functional Requirements - what the application does and how the user interacts with the application (i.e. user stories - CRUD functionality)
	e.g Twitter clone will need to:
		- Post tweets
		- Follow users (graph data structure)
		- Like/Favourite tweets 
		- View and add to timeline

1.2 - Non functional Requirements - what the system will contain 
		- High availability - 24hrs 
		- Low latency - loading and performance
		- Consistency can be compromised (i.e. may take a few seconds for updated tweets to show up on other users timelines)



==============================================================================
2 - Storage and Network Capacity (Load Balancing)
==============================================================================
2.1 - Generate assumptions (Twitter clone)
		- 1bn users total (active and inactive)
		- 200m daily active users (active == posting, updated, reading, following)
		- 100m tweets every 24hrs  (each tweet == 140 char (2 bytes per char) + ~30 bytes for ID storage, timestamp, location)
			100m * ((140 * 2) + 30) = 30GB per day capacity
			Per year capacity == 30GB * 365 == 11TB per year
			5 year span = 11TB * 5yrs = 55TB every 5 year span
		- 1 user has avg. 200 followers 
		
		Assume 10bn tweet views per day:
			10bn * 280bytes / 86400 seconds per day = 32MB of throughput/ second (scalability)
			Throughput == how much data can be transferred from one location to another in a given amount of time. 
						It is used to measure the performance of hard drives and RAM, as well as Internet and network connections.



==============================================================================
3 - System APIs
==============================================================================
Define what is expected from the system (SOAP or REST)
	e.g. posting tweets to server
		Using REST - 	(POST) tweet(userID, tweet-data, location, datetimestamp) - returns URL of new tweet
						(GET)  tweet(userID, tweet-ID) - returns info about tweet in JSON/XML

Transport Mechanism  = JSON or Protocol Buffers (protobuffs)
https://developers.google.com/protocol-buffers


Handling Security = Cross Site Scripting (XSS), SQL Injection, DDoS, Memory Corrupton, Buffer Overflow, Data Breach, 
https://www.cloudflare.com/en-ca/learning/security/what-is-web-application-security/



==============================================================================
4 - High level Design 
==============================================================================
Client ----> Load balancer -----> Server Cluster ----------------> Database (n)
										(n)
												-----------------> File Storage (S3 for images, videos, multimedia)
			(distributes traffic
			across sever cluster)

Types of Load Balancers:
- DNS load balancing 
- Specialist software - NGINX
- Cloud systems - Elastic Load Balancing (ELB by AWS) (Azure Load Balancer) (GCP Load Balancer)

Can set up rules such as: 
- Round Robin - distribute client traffic in sequence given (n) amount of servers in a cluster
- Hashing IP Address
- Sort by Availability



==============================================================================
5 - Database Schema
==============================================================================
Tweet_TB				User_TB		        UserFollow_TB			Favourites
--------				----------			--------------			------------
tweet_id (PK)			user_id (PK)		user_1					tweet_id
user_id 				first_name			user_2					user_id
latititude				last_name
longitude				email
date_created			phone_num
num_favourited			dob
						user_name
						acc_created
						last_login_date
						num_followers	
						num_following




==============================================================================
6 - Data Sharding
==============================================================================
Assumpitons - A lot of new tweets daily, heavy read/write load 
- need to find a way to distribute data across (n) multiple machines so we can read/write efficiently
- data sharding == split data across multiple machines for optimizing performance across billions of transactions/day
- Vertical and Horizontal Sharding

- Shard by user_ID -- Client ----> Load balancer -----> Server Cluster -------Router based on ID chronology (A-M) (N-Z) ---------> Database (n)
- Shard by user_ID -- Client ----> Load balancer -----> Server Cluster ------- Hash Function % number of Databases ---------> Database (n)
- Shard by date_created -- Client ----> Load balancer -----> Server Cluster ------- Hash Function % number of Databases ---------> Database (n)
- Multiple other options of data sharding 



==============================================================================
7 - Caching (avoiding Database Server overloads)
==============================================================================
Web Caching == 	Web caching is the activity of storing data for reuse, 
				such as a copy of a web page served by a web server. 
				It is cached or stored the first time a user visits the page and the next time a user requests the same page, 
				a cache will serve the copy, which helps keep the origin server from getting overloaded.

E.g. caching hot tweets/users
memcache, redis, cassandra 

CDNs - content delivery networks to cache static asset files (HTML, JavaScript, CSS, images, videos, multimedia)
Cloud-based CDNs == Amazon S3, Azure Storage, GCP Cloud Storage


System Design
==================
Application Servers <-------> Cache (lives in memory) <----------> Database
Application server checks for tweets in cache --> if it exists ---> cache returns data
If doesn't exists in cache (cache miss), cache requests data from database (slower read time as it has to fetch direct)
Database returns data ----> updates cache -----> send back to app server

Once cache is full --> need to kick out old data using time stamp LRU algorithm (least recently used)
Push new one to top, and pop off oldest cached data (Stack Data Structure)

or

use 80-20 rule --> algorithm that keeps most read/favourited tweets longer in memory than regular tweets

or 

Parent-Child replications = 
				SQL replication is a process that enables data from one database server (the parent) 
				to be copied automatically to one or more database servers (the child). 
				It is usually used to spread READ access on multiple servers for scalability, although 
				it can also be used for other purposes such as for failover, or analyzing data on the 
				child in order not to overload the parent.
